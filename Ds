q using linked

//22.Queue using Linked List 

#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node *next;
}NODE;
NODE *front=NULL,*rear=NULL;


void enqueue()
{
    NODE *ptr;
	ptr=(NODE*)malloc(sizeof(NODE));
	printf("\nEnter the element: ");
	scanf("%d",&ptr->data);
	ptr->next=NULL;
	if(rear==NULL)
	{
		front=ptr;
		rear=ptr;
	}
	else
	{
		rear->next=ptr;
		rear=ptr;
	}
}

void dequeue()
{
    NODE *p;
	if(front==NULL)
		printf("\nQueue is empty!!\n");
	else
	{
		p=front;
		printf("Deleted Element is %d\n",front->data);
		front=front->next;
		free(p);
		if(front==NULL)
		rear=NULL;
	}
}

void display()
{
    NODE *ptr;
	if(front==NULL)
	printf("\nQueue is empty!!\n");
	else
	{
		printf("Queue elements are: ");
		ptr=front;
		while(ptr!=NULL)
		{
			printf(" %d",ptr->data);
			ptr=ptr->next;
		}
		printf("\n");
	}
}

void main()
{
	int ch;
	
	printf("\nQUEUE USING LINKED LIST");
	printf("\n.....................................\n");
	while(ch!=4)
	{
		printf("\n\tMENU\n");
		printf("1.PUSH\n2.POP\n3.DISPLAY\n4.EXIT\nEnter your choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				enqueue();
				break;
			case 2:
				dequeue();
				break;
			case 3:
				display();
				break;
			case 4:
				break;
			default :
				printf("Invalid choice!!\n");
		}
	}
	printf("Exiting..\n");
	
}


//21.Stack using Linked List 

#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node *next,*prev;
}NODE;
NODE *start=NULL,*top=NULL;

void push()
{
	int item;
	NODE *ptr;
	ptr=(NODE*)malloc(sizeof(NODE));
	printf("\nEnter the element: ");
	scanf("%d",&item);
	ptr->data=item;
	ptr->next=NULL;
	ptr->prev=NULL;
	if(start==NULL)
	{
		start=ptr;
		top=ptr;
	}
	else
	{
		ptr->next=top;
		top->prev=ptr;
		top=ptr;
	}
	printf("\nInsertion Successful..\n");
}
void pop()
{
	NODE *ptr;	
	if(top==NULL)
				printf("\nStack is empty");
	else
	{
		ptr=top;
		printf("\nDeleted Element is %d",top->data);
		top=top->next;
		free(ptr);
		if(top==NULL)
			start=NULL;
	}
}
void display()
{
	NODE *p;	
	if(top==NULL)
		printf("\nStack is empty");
	else
	{
		printf("\nStack elements are:\n");
		p=top;
		while(p!=NULL)
		{
			printf("%d\n ",p->data);
			p=p->next;
		}
	}
}
	
int main()
{
	int ch;
	printf("\nPROGRAM TO PUSH, POP AND DISPLAY ELEMENTS TO STACK USING LINKED LIST");
	printf("\n.......................................................\n");
	while(ch!=4)
	{
		printf("\t\tMENU\n");
		printf("1.PUSH\n2.POP\n3.DISPLAY\n4.EXIT\nEnter your choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				push();
				break;
			case 2:
				pop();
				break;
			case 3:
				display();
				break;
			case 4:
				break;
			default :
				printf("Invalid choice!!\n");
		}
	}
	printf("Exiting..\n");
	return 0;
}

//20.Doubly Linked List

#include <stdio.h>
#include <stdlib.h>
struct node
{
	int data;
	struct node *next,*prev;
};
typedef struct node NODE;
NODE *start=NULL;

void insert_dlbeg()
{
	int item;
	NODE *temp;
	temp=(NODE*)malloc(sizeof(NODE));
	printf("Enter the element to be inserted : ");
	scanf("%d",&item);
	temp->data = item;
	if(start == NULL)
	{
		temp->prev=NULL;
		temp->next=NULL;
		start=temp;
	}
	else{
		temp->next=start;
		start->prev=temp;
		start=temp;
		temp->prev=NULL;
	}
	printf("Insertion Successful..\n");
}

void insert_dlend()
{
	int item;
	NODE *temp,*p;
	temp=(NODE*)malloc(sizeof(NODE));
	printf("Enter the element to be inserted : ");
	scanf("%d",&item);
	temp->data = item;
	if(start == NULL)
	{
		temp->prev=NULL;
		temp->next=NULL;
		start=temp;
	}
	else{
		p=start;
		while(p->next != NULL)
		{
			p=p->next;
		}
		p->next=temp;
		temp->prev=p;
		temp->next=NULL;
	}
	printf("Insertion Successful..\n");
}

void insert_dlpos()
{
    int key, item;
    
    NODE *temp,*ptr;
    temp=(NODE*)malloc(sizeof(NODE));
    printf("Enter the element to be inserted : ");
    scanf("%d", &item);
    temp->data=item;
    if(start==NULL)
    {
        temp->prev=NULL;
  temp->next=NULL;
  start=temp;
    }
    else{
        printf("Enter the key value after which insertion is to be done: ");
    scanf("%d", &key);
        ptr=start;
    while(ptr->data != key && ptr->next!= NULL)
    {
        ptr=ptr->next;
    }
    if(ptr->next==NULL && ptr->data ==key)
    {
        ptr->next=temp;
        temp->prev=ptr;
        temp->next=NULL;
    }
    else if(ptr->data==key)
    {
        temp->next=ptr->next;
        ptr->next->prev=temp;
        temp->prev=ptr;
        ptr->next=temp;
    }
    else{
        printf("Invalid entry for key!\n");
        return;
    }
    }
    printf("Insertion Successful..\n");
}

void delete_dlbeg()
{
	NODE *temp;
	if(start==NULL)
	{
		printf("Deletion is not possible..\n");
		return;
	}
	else{
		temp=start;
		if(start->next==NULL)
		{
			start=NULL;
		}
		else{
			start=temp->next;
			start->prev=NULL;
		}
		printf("Deleted element is %d\n",temp->data);
		free(temp);
	}
}

void delete_dlend()
{
	NODE *p,*q;
	if(start==NULL)
	{
		printf("Deletion is not possible..\n");
		return;
	}
	else{
		p=start;
		if(start->next==NULL)
		{
			start=NULL;
		}
		else{
			while(p->next != NULL)
			{
				p=p->next;
			}
			q=p->prev;
			q->next=NULL;
		}
		printf("Deleted element is %d\n",p->data);
		free(p);
	}
		
}

void delete_dlpos()
{
    int key;
    NODE *p,*q;
    if(start==NULL)
 {
  printf("Deletion is not possible..\n");
  return;
 }
 else{
    p=start;
    printf("Enter the element to be deleted: ");
    scanf("%d", &key);
    if(p->data==key)
    {
        start=p->next;
        start->prev=NULL;
    }
    else{
    while(p->data != key && p->next!= NULL)
    {
        p=p->next;
    }
    
    if(p->next==NULL && p->data ==key)
    {
        p->prev->next=NULL;
    }
    else if(p->data==key)
    {
        p->prev->next=p->next;
        p->next->prev=p->prev;
    }
    else{
        printf("Invalid entry for key!\n");
        return;
    }
    }
    printf("%d is deleted\n",p->data);
  free(p);
 }
}

void display_dl()
{
	NODE *p;
	if(start == NULL)
	{
		printf("List is empty,no elements..\n");
	}
	else{
		p=start;
		while(p->next != NULL)
		{
			printf("%d -> ",p->data);
			p=p->next;
		}
		printf("%d",p->data);
	}
}

int main()
{
	int ch;
	while(ch != 8)
	{
		printf("\nDoubly Linked List MENU : ");
		printf("\n1.Insert at beginning\n2.Insert at end\n3.Insert after an element key");
		printf("\n4.Delete from beginning\n5.Delete from end\n6.Delete a particular element");
		printf("\n7.Display list\n8.EXIT\n");
		printf("\nEnter the choice : ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				insert_dlbeg();
				break;
			case 2:
				insert_dlend();
				break;
			case 3:
				insert_dlpos();
				break;
			case 4:
				delete_dlbeg();
				break;
			case 5:
				delete_dlend();
				break;
			case 6:
				delete_dlpos();
				break;
			case 7:
				display_dl();
				break;
			case 8:
				break;
			default :
				printf("Invalid choice!!\n");
		}
	}
	printf("Exiting..\n");
	return 0;
}

//19.Singly Linked List 

#include <stdio.h>
#include <stdlib.h>
struct node
{
	int data;
	struct node *next;
};
typedef struct node NODE;
NODE *start=NULL;

void insert_beg()
{
	int item;
	NODE *temp;
	temp=(NODE*)malloc(sizeof(NODE));
	printf("Enter the element to be inserted : ");
	scanf("%d",&item);
	temp->data = item;
	if(start == NULL)
	{
		temp->next=NULL;
		start=temp;
	}
	else{
		temp->next=start;
		start=temp;
	}
	printf("Insertion Successful..\n");
}

void insert_end()
{
	int item;
	NODE *temp,*p;
	temp=(NODE*)malloc(sizeof(NODE));
	printf("Enter the element to be inserted : ");
	scanf("%d",&item);
	temp->data = item;
	if(start == NULL)
	{
		temp->next=NULL;
		start=temp;
	}
	else{
		p=start;
		while(p->next != NULL)
		{
			p=p->next;
		}
		p->next=temp;
		temp->next=NULL;
	}
	printf("Insertion Successful..\n");
}

void insert_pos()
{
	int item,pos,flag=0;
	NODE *temp,*p,*q;
	printf("Enter the element to be inserted : ");
	scanf("%d",&item);
	printf("Enter the position : ");
	scanf("%d",&pos);
	p=start;
	for(int i=1; i<pos; i++)
	{	
		q=p;
		p=p->next;
		if(p==NULL)
		{
			flag=1;
			break;
		}
	}
	temp=(NODE*)malloc(sizeof(NODE));
	temp->data=item;
	if(flag==1)
	{
		printf("Invalid position..\n");
		return;
	}
	else{
		if(pos==1)
		{
			temp->next=start;
			start=temp;
		}
		else{
			temp->next=p;
			q->next=temp;
		}
	}
	printf("Insertion Successful..\n");
}

void delete_beg()
{
	NODE *temp;
	if(start==NULL)
	{
		printf("Deletion is not possible..\n");
		return;
	}
	else{
		temp=start;
		if(start->next==NULL)
		{
			start=NULL;
		}
		else{
			start=start->next;
		}
		printf("Deleted element is %d\n",temp->data);
		free(temp);
	}
}

void delete_end()
{
	NODE *p,*q;
	if(start==NULL)
	{
		printf("Deletion is not possible..\n");
		return;
	}
	else{
		p=start;
		if(start->next==NULL)
		{
			start=NULL;
		}
		else{
			while(p->next != NULL)
			{
				q=p;
				p=p->next;
			}
			q->next=NULL;
		}
		printf("Deleted element is %d\n",p->data);
		free(p);
	}
		
}

void delete_pos()
{
	int pos;
	NODE *p,*q;
	if(start==NULL)
	{
		printf("Deletion is not possible..\n");
		return;
	}
	else{
		printf("Enter the position : ");
		scanf("%d",&pos);
		if(pos == 1)
		{
			if(start->next == NULL)
			{
				p=start;
				start=NULL;
				printf("Deleted element is %d\n",p->data);
				free(p);
			}
			else{
				p=start;
				start=start->next;
				printf("Deleted element is %d\n",p->data);
				free(p);
			}
		}
		else{
			p=start;
			for(int i=1; i<pos; i++)
			{
				if(p->next != NULL)
				{
					q=p;
					p=p->next;
				}
				else{
					printf("Invalid position..\n");
					return;
				}
			}
			q->next = p->next;
			printf("Deleted element is %d\n",p->data);
			free(p);
		}
	}
}

void display()
{
	NODE *p;
	if(start == NULL)
	{
		printf("List is empty,no elements..\n");
	}
	else{
		p=start;
		while(p->next != NULL)
		{
			printf("%d -> ",p->data);
			p=p->next;
		}
		printf("%d",p->data);
	}
}

int main()
{
	int ch;
	while(ch != 8)
	{
		printf("\nSingly Linked List MENU : ");
		printf("\n1.Insert at beginning\n2.Insert at end\n3.Insert at a particular position");
		printf("\n4.Delete from beginning\n5.Delete from end\n6.Delete from a particular position");
		printf("\n7.Display list\n8.EXIT\n");
		printf("\nEnter the choice : ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				insert_beg();
				break;
			case 2:
				insert_end();
				break;
			case 3:
				insert_pos();
				break;
			case 4:
				delete_beg();
				break;
			case 5:
				delete_end();
				break;
			case 6:
				delete_pos();
				break;
			case 7:
				display();
				break;
			case 8:
				break;
			default :
				printf("Invalid choice!!\n");
		}
	}
	printf("Exiting..\n");
	return 0;
}

//18.Sparse Matrix Transpose 

#include <stdio.h>

int main() {
    int A[100][100],a[100][3], T[100][3];
	int i,j,k,r,c;
	printf("Enter number of rows and columns of the matrix : ");
	scanf("%d %d",&r,&c);
	
	printf("Enter elements of the matrix : \n");
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			scanf("%d",&A[i][j]);
		}
	}
    k=1;
    for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{	
			if(A[i][j]!=0)
			{
				a[k][0]=i;
				a[k][1]=j;
				a[k][2]=A[i][j];
				k++;
			}
		}
	}
	a[0][0]=r;
	a[0][1]=c;
	a[0][2]=k-1;
	
	printf("\nSparse Matrix A:\n");
	for(i=0;i<=a[0][2];i++)
	{
		for(j=0;j<3;j++)
		{
			printf("%d\t",a[i][j]);
		}
		printf("\n");
	}
	
    T[0][0]=a[0][1];
    T[0][1]=a[0][0];
    T[0][2]=a[0][2];
    k=1;
    int m=a[0][1],n=a[0][2];
    for(i=0;i<=m-1;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(a[j][1]==i)
            {
                T[k][0]=a[j][1];
                T[k][1]=a[j][0];
                T[k][2]=a[j][2];
                k++;
            }
        }
    }
    
    printf("\nTranspose of Sparse Matrix A:\n");
	for(i=0;i<=T[0][2];i++)
	{
		for(j=0;j<3;j++)
		{
			printf("%d\t",T[i][j]);
		}
		printf("\n");
	}
    
    return 0;
}

//17.Sparse Matrix Addition

#include <stdio.h>

void print_sparse(int s[][3])
{
	int i,j;
	for(i=0;i<=s[0][2];i++)
	{
		for(j=0;j<3;j++)
		{
			printf("%d\t",s[i][j]);
		}
		printf("\n");
	}
}

void add_sparse(int a[][3],int b[][3])
{
	int c[100][3];
	int i=1,j=1,k=1;
	int m=a[0][2],n=b[0][2];
	if(a[0][0]!=b[0][0] || a[0][1]!=b[0][1])
	{
		printf("Invalid order of matrices for addition..");
		return;
	}
	while(i<=m && j<=n)
	{
		if(a[i][0]==b[j][0] && a[i][1]==b[j][1])
		{
			c[k][0]=a[i][0];
			c[k][1]=a[i][1];
			c[k][2]=a[i][2]+b[j][2];
			i++;
			j++;
			k++;
		}
		else if(a[i][0]==b[j][0])
		{
			if(a[i][1]<b[j][1])
			{
				c[k][0]=a[i][0];
				c[k][1]=a[i][1];
				c[k][2]=a[i][2];
				i++;
			}
			else
			{
				c[k][0]=b[j][0];
				c[k][1]=b[j][1];
				c[k][2]=b[j][2];
				j++;
			}
			k++;
		}
		else
		{
			if(a[i][0]<b[j][0])
			{
				c[k][0]=a[i][0];
				c[k][1]=a[i][1];
				c[k][2]=a[i][2];
				i++;
			}
			else
			{
				c[k][0]=b[j][0];
				c[k][1]=b[j][1];
				c[k][2]=b[j][2];
				j++;
			}
			k++;
		}
	}
	while(i<=m)
	{
		c[k][0]=a[i][0];
		c[k][1]=a[i][1];
		c[k][2]=a[i][2];
		i++;
		k++;
	}
	while(j<=n)
	{
		c[k][0]=b[j][0];
		c[k][1]=b[j][1];
		c[k][2]=b[j][2];
		j++;
		k++;
	}
	c[0][0]=a[0][0];
	c[0][1]=a[0][1];		
	c[0][2]=k-1;
		
	printf("\nResult of Sparse Matrix Addition :\n");
	print_sparse(c);
}

int main()
{
	int A[100][100],a[100][3],B[100][100],b[100][3];
	int i,j,k,m,n;
	printf("Enter number of rows and columns of the matrices : ");
	scanf("%d %d",&m,&n);
	
	printf("Enter elements of the first matrix : \n");
	for(i=0;i<m;i++)
	{
		for(j=0;j<n;j++)
		{
			scanf("%d",&A[i][j]);
		}
	}
	k=1;
	for(i=0;i<m;i++)
	{
		for(j=0;j<n;j++)
		{	
			if(A[i][j]!=0)
			{
				a[k][0]=i;
				a[k][1]=j;
				a[k][2]=A[i][j];
				k++;
			}
		}
	}
	a[0][0]=m;
	a[0][1]=n;
	a[0][2]=k-1;
	printf("\nSparse Matrix A:\n");
	print_sparse(a);
	
	printf("Enter elements of the second matrix : \n");
	for(i=0;i<m;i++)
	{
		for(j=0;j<n;j++)
		{
			scanf("%d",&B[i][j]);
		}
	}
	k=1;
	for(i=0;i<m;i++)
	{
		for(j=0;j<n;j++)
		{	
			if(B[i][j]!=0)
			{
				b[k][0]=i;
				b[k][1]=j;
				b[k][2]=B[i][j];
				k++;
			}
		}
	}
	b[0][0]=m;
	b[0][1]=n;
	b[0][2]=k-1;
	printf("\nSparse Matrix B:\n");
	print_sparse(b);
	
	add_sparse(a,b);
	
	
	return 0;
}


//12.Infix to Postfix

#include <stdio.h>
#include<string.h>
#define MAX_SIZE 100

char infixStack[MAX_SIZE];
int infixTop=-1;

char postfixStack[MAX_SIZE];
int postfixTop = -1;

char prefixStack[MAX_SIZE];
int prefixTop = -1;

void pushInfix(char item)
{
	if (infixTop == MAX_SIZE-1)
		printf("Stack Overflow\n");
	infixStack[++infixTop] = item;
}

char popInfix()
{
	if (infixTop == -1)
		printf("Stack Underflow\n");
	return infixStack[infixTop--];
}

void pushPostfix(char item)
{
	if (postfixTop == MAX_SIZE - 1)
		printf("Stack Overflow\n");
	postfixStack[++postfixTop] = item;
}

char popPostfix()
{
	if (postfixTop == -1)
		printf("Stack Underflow\n");
	return postfixStack[postfixTop--];
}

void pushPrefix(char item)
{
	if (prefixTop == MAX_SIZE - 1)
		printf("Stack Overflow\n");
	prefixStack[++prefixTop] = item;
}

char popPrefix()
{
	if (prefixTop == -1)
		printf("Stack Underflow\n");
	return prefixStack[prefixTop--];
}

int precedence(char operator)
{
	switch(operator)
	{
		case '+':
		case '-':
			return 1;
			
		case '*':
		case '/':
			return 2;
			
		case '^':
			return 3;
			
		default:
			return 0;
	}
}

void infixToPostfix(char infix[])
{
	char symbol, popped;
	for (int i = 0; infix[i] != '\0'; ++i)
	{
		symbol = infix[i];
		if (symbol >= '0' && symbol <= '9')
			pushPostfix(symbol);

		else if (symbol == '(')
			pushInfix(symbol);

		else if (symbol == ')')
		{
			while ((popped = popInfix()) != '(')
			pushPostfix(popped);
		}
		else
		{
			while (precedence (infixStack [infixTop]) >= precedence(symbol))
			{
				popped = popInfix();
				pushPostfix(popped);
			}
			pushInfix(symbol);
		}
	}
	while (infixTop != -1)
	{
		popped = popInfix();
		pushPostfix(popped);
	}
	postfixStack[++postfixTop] = '\0';
}

int evaluatePostfix(char postfix[])
{
	int operand, operand1, operand2;
	char symbol;
	for (int i = 0; postfix[i] != '\0'; ++i)
	{
		symbol = postfix[i];
		if (symbol >= '0' && symbol <= '9')
		{
			operand = symbol - '0';
			pushPostfix(operand);
		}
		else
		{
			operand2 = popPostfix();
			operand1 = popPostfix();
			switch (symbol)
			{
				case '+':
					pushPostfix(operand1 + operand2);
					break;
				
				case '-':
					pushPostfix(operand1 - operand2);
					break;
					
				case '*':
					pushPostfix(operand1 * operand2);
					break;
				
				case '/':
					pushPostfix(operand1 / operand2);
					break;
				
				case '^':
					pushPostfix(operand1 ^ operand2);
					break;
					
				default:
					printf("Invalid operator in postfix expression\n");
			}
		}
	}
	return postfixStack[postfixTop];
}
	
int evaluatePrefix(char prefix[])
{
	int operand, operand1, operand2;
	char symbol;
	int l=strlen(prefix);
	for (int i = l - 1; i >= 0; --i)
	{
		symbol = prefix[i];
		if (symbol >= '0' && symbol <= '9')
		{
			operand = symbol - '0';
			pushPrefix(operand);
		}
		else
		{
			operand2 = popPrefix();
			operand1 = popPrefix();
			switch (symbol)
			{
				case '+':
					pushPrefix(operand2 + operand1);
					break;
				
				case '-':
					pushPrefix(operand2 - operand1);
					break;
					
				case '*':
					pushPrefix(operand2 * operand1);
					break;
				
				case '/':
					pushPrefix(operand2 / operand1);
					break;
				
				case '^':
					pushPrefix(operand2 ^ operand1);
					break;
					
				default:
					printf("Invalid operator in postfix expression\n");
			}
		}
	}
	return prefixStack[prefixTop];
}
	
void main()
{
	int choice, result;
	char infixExpression[MAX_SIZE], postfixExpression[MAX_SIZE], prefixExpression[MAX_SIZE];
	
	while(1)
	{
		printf("\nMenu:\n");
		printf("1. Infix to Postfix Conversion\n");
		printf("2. Postfix Evaluation\n");
		printf("3. Prefix Evaluation\n");
		printf("4. Exit\n");
		printf("Enter the choice: ");
		scanf("%d", &choice);
		switch (choice)
		{
			case 1:
				printf("Enter Infix expression to convert to Postfix: \n");
				scanf("%s", infixExpression);
				infixToPostfix(infixExpression);
				printf("Postfix expression: %s\n", postfixStack);
				break;

			case 2:
				printf("Enter Postfix expression for Evaluation: \n");
				scanf("%s", postfixExpression);
				result = evaluatePostfix(postfixExpression);
				printf("Result of expression: %d\n", result);
				break;
				
			case 3:
				printf("Enter Prefix expression for Evaluation: \n");
				scanf("%s", prefixExpression);
				result = evaluatePrefix(prefixExpression);
				printf("Result of expression: %d\n", result);
				break;
				
			case 4:
				printf("Exiting..\n");
				return 0;
				
			default:
				printf("Invalid choice!!\n");
		}
	}
}
